[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

#Conditional QGL (Normal QGL if not level)
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=1.000 speed=10
        G28 Z
    {% endif %}
    
    {% if printer.quad_gantry_level.applied == True %}
        _QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

#[gcode_macro QUAD_GANTRY_LEVEL]
#rename_existing: _QUAD_GANTRY_LEVEL
#gcode:
#    _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=1.000
#    _QUAD_GANTRY_LEVEL horizontal_move_z=2
    
[gcode_macro G32]
gcode:
    G90
    BED_MESH_CLEAR
    CG28                      ; Home if not homed to get everything turned on
    BLOBIFIER_CLEAN           ; Wipe nozzle
    QGL                       ; Level
    G28 Z                     ; Home the Z now that nozzle is clean
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}

    NEVERMORE_PRINT_START
    
    M117 Starting warmup
    
    M117 Warmup
    SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
    M140 S{target_bed}
    M109 S150                                    # Heats the nozzle to 150c
    M190 S{target_bed}                           # Sets the target temp for the bed
    G32                                ; Home XYZ and do QGL

    M83                                ; Make the E relative independant of other axis
    SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
    #STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
    bed_mesh_calibrate                 # Starts bed mesh
    
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
    #STATUS_HEATING                                                # Sets SB-leds to heating-mode
    M107                                                          # Turns off partcooling fan
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp

    SET_LED LED="StealthBurner_Lights" RED=0 GREEN=0 BLUE=0 WHITE=0.1176 SYNC=0 INDEX=2
    SET_LED LED="StealthBurner_Lights" RED=0 GREEN=0 BLUE=0 WHITE=0.1176 SYNC=0 INDEX=3 TRANSMIT=1
    M117
    #G1 Z20 F3000                   ; move nozzle away from bed
    #   Use PRINT_START for the slicer starting script - please customise for your slicer of choice


[gcode_macro TURN_OFF_HEATERS]
rename_existing: NEVERMORE_CONTROLLER_INNER_TURN_OFF_HEATERS
gcode:
    NEVERMORE_CONTROLLER_INNER_TURN_OFF_HEATERS
    # See <<NEVERMORE_PRINT_END>> for options.
    NEVERMORE_PRINT_END

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-12.0 F3600                 ; retract filament
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} F6600  ; park nozzle at rear
    M107                                     ; turn off fan
    CLEAR_ACTIVE_SPOOL
    
    TURN_OFF_HEATERS
    
    BED_MESH_CLEAR
    SET_LED LED="StealthBurner_Lights" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 INDEX=2
    SET_LED LED="StealthBurner_Lights" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 INDEX=3 TRANSMIT=1
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro START_PRINT_PURGE]
gcode:
    M117 Purging

    PURGE_BUCKET
    G1 E3 F1500 # unretract
 
    M117 Starting Print
    
    SET_LED LED="StealthBurner_Lights" RED=0 GREEN=0 BLUE=0 WHITE=1 SYNC=0 INDEX=2
    SET_LED LED="StealthBurner_Lights" RED=0 GREEN=0 BLUE=0 WHITE=1 SYNC=0 INDEX=3 TRANSMIT=1

    SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E75 F300                    ; load
   G1 E25 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute

[gcode_macro INSERT_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   M109 S240                      ; Heat up hotend
   G1 E75 F300                    ; load
   G1 E25 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-75 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro PARK_TOOLHEAD]
gcode:
   CG28
   G0 X150 Y290 F10000        ; park toolhead at back of printer

[gcode_macro CENTER_TOOLHEAD]
gcode:
   CG28
   G0 X150 Y150 Z30 F10000        ; park toolhead at center of bed

[gcode_macro LED_ON]
gcode:
   SET_LED LED="Chamber_Lights" RED=1 GREEN=0.5373 BLUE=0.2706 TRANSMIT=1
   SET_LED LED="StealthBurner_Lights" RED=0 GREEN=0.6353 BLUE=0.6784 WHITE=0 SYNC=0 INDEX=1 TRANSMIT=1

[gcode_macro LED_OFF]
gcode:
   SET_LED LED="Chamber_Lights" RED=0 GREEN=0 BLUE=0 TRANSMIT=1
   SET_LED LED="StealthBurner_Lights" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1

[gcode_macro Gate_Mapper]
gcode:
   {% set gate  = params.Gate|default(0)|int %}
   {% set spoolid  = params.SpoolID|default(0)|int %}
   MMU_GATE_MAP {rawparams} 
   MMU_GATE_MAP REFRESH=1

[gcode_macro rewinder_test]
gcode:
    MMU_TEST_LOAD LENGTH=50
    {% for n in range(20) %}

# cycles currently set at 20, i.e. range(20).  You can changes this however you chose.
        MMU_SERVO POS=DOWN
#        MANUAL_STEPPER STEPPER="gear_stepper" SPEED=300 ACCEL=400 MOVE=600
        MMU_TEST_MOVE SPEED=300 ACCEL=400 MOVE=600
# change the SPEED and ACCEL as you see fit
        MMU_SERVO POS=UP
# to stop a macro mid-cycle you must use the e-stop.  This dwell allows you to hit the e-stop while the servo is up so that you can pull the filament out of the ERCF while the printer/macro is stopped
        MMU_SERVO POS=DOWN
        MMU_TEST_MOVE SPEED=300 ACCEL=400 MOVE=-600
        MMU_SERVO POS=UP

    {% endfor %}


[gcode_macro rewinder_test_multitool]
gcode:
    {% set gates = [9] %} # [0,1,2,3,4,5] move between these gates
    {% set test_load_length = params.TEST_LOAD_LENGTH | default(50) | float %}
    {% set repeats = params.REPEATS | default(20) | int %}
    {% set speed = params.SPEED | default(300) | float %}
    {% set accel = params.ACCEL | default(400) | float %}
    {% set length = params.LENGTH | default(800) | float %}

    MMU_HOME

#    MMU_TEST_LOAD LENGTH=50
    {% for n in range(repeats) %}
        {% for gate in gates %}
            MMU_SELECT GATE={gate}
            MMU_TEST_LOAD LENGTH={test_load_length} # preload gate for a bit of length
            MMU_TEST_MOVE SPEED={speed} ACCEL={accel} MOVE={length}
            MMU_SERVO POS=UP
            MMU_TEST_MOVE SPEED={speed} ACCEL={accel} MOVE=-{length}
            MMU_EJECT
            MMU_RECOVER

        {% endfor %}
  
    {% endfor %}